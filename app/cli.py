# cli.py

import json
import subprocess
import typer
import uuid
from datetime import datetime
from jinja2 import Template
from pathlib import Path

app = typer.Typer()

DB_PATH = Path("commands.json")

def load_commands():
    with open(DB_PATH, "r") as f:
        return json.load(f)

def save_commands(commands):
    with open(DB_PATH, "w") as f:
        json.dump(commands, f, indent=2)

@app.command()
def help():
    """
    Affiche l‚Äôaide et la liste des commandes disponibles.
    """
    typer.echo("üß∞ Babbox - Outil de stockage et d‚Äôex√©cution de commandes CLI")
    typer.echo("\nCommandes disponibles :\n")
    typer.echo("  add                         Ajouter une nouvelle commande")
    typer.echo("  edit <ID>                   Modifier une commande existante")
    typer.echo("  list                        Lister les commandes enregistr√©es")
    typer.echo("      --category <CAT>          Listing par cat√©gorie")
    typer.echo("      --tag <TAG>               Listing par tag")
    typer.echo("      --search <KEYWORD>        Listing par mot-cl√©")
    typer.echo("  run <ID>                    Ex√©cuter une commande")
    typer.echo("  select                      Rechercher une commande via fzf (option --run)")
    typer.echo("  tui                         Interface visuelle (TUI)")
    typer.echo("  help                        Afficher cette aide")

@app.command()
def list_commands(category: str = typer.Option(None), tag: str = typer.Option(None)):
    """
    Liste les commandes avec filtres optionnels (cat√©gorie, tag).
    """
    commands = load_commands()
    for cmd in commands:
        if category and cmd["category"] != category:
            continue
        if tag and tag not in cmd["tags"]:
            continue
        typer.echo(f"[{cmd['id']}] {cmd['title']} ({cmd['category']})")


@app.command()
def list(
    category: str = typer.Option(None, "--category", "-c", help="Filtrer par cat√©gorie"),
    tag: str = typer.Option(None, "--tag", "-t", help="Filtrer par tag"),
    search: str = typer.Option(None, "--search", "-s", help="Filtrer par mot-cl√© dans le titre")
):
    """
    Liste les commandes enregistr√©es avec des filtres optionnels.
    """
    commands = load_commands()
    filtered = []

    for cmd in commands:
        if category and cmd["category"].lower() != category.lower():
            continue
        if tag and tag.lower() not in [t.lower() for t in cmd["tags"]]:
            continue
        if search and search.lower() not in cmd["title"].lower():
            continue
        filtered.append(cmd)

    if not filtered:
        typer.echo("‚ö†Ô∏è  Aucune commande trouv√©e avec ces crit√®res.")
        raise typer.Exit()

    for cmd in filtered:
        typer.echo(f"üîπ [{cmd['id']}] {cmd['title']} ({cmd['category']}) ‚Äî Tags: {', '.join(cmd['tags'])}")


@app.command()
def run(id: str):
    """
    Ex√©cute une commande en remplissant les variables demand√©es.
    """
    commands = load_commands()
    for cmd in commands:
        if cmd["id"] == id:
            template = Template(cmd["command"])
            vars_needed = {}

            # Demande des variables
            for var in cmd["variables"]:
                val = typer.prompt(f"{var['description']} ({var['name']})", default=var.get("default", ""))
                vars_needed[var["name"]] = val

            final_cmd = template.render(**vars_needed)
            typer.echo(f"\nüëâ Commande : {final_cmd}")
            confirm = typer.confirm("Lancer cette commande ?", default=False)
            if confirm:
                import os
                os.system(final_cmd)
            return

    typer.echo("‚ùå Commande non trouv√©e", err=True)

@app.command()
def add():
    """
    Ajoute une nouvelle commande √† la bo√Æte √† outils.
    """
    typer.echo("üÜï Cr√©ation d'une nouvelle commande")
    title = typer.prompt("Titre")
    command = typer.prompt("Commande (avec {{ variable }} si besoin)")
    category = typer.prompt("Cat√©gorie")
    tags_str = typer.prompt("Tags (s√©par√©s par des virgules)")
    description = typer.prompt("Description de la commande")
    contexte = typer.prompt("Contexte d'utilisation (ex: maintenance, prod, dev...)")
    tags = [tag.strip() for tag in tags_str.split(",") if tag.strip()]

    variables = []
    has_vars = typer.confirm("La commande utilise-t-elle des variables ?", default=False)
    while has_vars:
        name = typer.prompt("Nom de la variable")
        gendesc = typer.prompt("Description de cette variable")
        default = typer.prompt("Valeur par d√©faut (laisser vide si aucune)", default="")
        variables.append({
            "name": name,
            "description": gendesc,
            "default": default
        })
        has_vars = typer.confirm("Ajouter une autre variable ?", default=False)

    # Cr√©ation de l'objet
    now = datetime.utcnow().isoformat() + "Z"
    
    # R√©cup√©ration du dernier ID num√©rique
    commands = load_commands()
    existing_ids = [int(cmd["id"]) for cmd in commands if cmd["id"].isdigit()]
    next_id = f"{(max(existing_ids) + 1) if existing_ids else 1:03}"

    # Demande √† l'utilisateur s‚Äôil souhaite personnaliser l‚ÄôID
    use_custom_id = typer.confirm(f"Souhaites-tu d√©finir un ID manuellement ? (sinon {next_id} sera utilis√©)", default=False)
    cmd_id = typer.prompt("ID de la commande", default=next_id) if use_custom_id else next_id


    new_command = {
        "id": cmd_id,
        "title": title,
        "command": command,
        "category": category,
        "tags": tags,
        "description": description,
        "contexte": contexte,
        "variables": variables,
        "created_at": now,
        "updated_at": now
    }

    # Sauvegarde
    commands = load_commands()
    commands.append(new_command)
    with open(DB_PATH, "w") as f:
        json.dump(commands, f, indent=2)

    typer.echo(f"\n‚úÖ Commande ajout√©e avec l'ID : {new_command['id']}")

@app.command()
def edit(id: str):
    """
    Modifie une commande existante.
    """
    commands = load_commands()
    for cmd in commands:
        if cmd["id"] == id:
            typer.echo(f"üìù Modification de la commande '{cmd['title']}' (ID: {id})\n")

            cmd["title"] = typer.prompt("Titre", default=cmd["title"])
            cmd["command"] = typer.prompt("Commande", default=cmd["command"])
            cmd["category"] = typer.prompt("Cat√©gorie", default=cmd["category"])
            tags_str = typer.prompt("Tags (s√©par√©s par des virgules)", default=",".join(cmd["tags"]))
            cmd["tags"] = [tag.strip() for tag in tags_str.split(",") if tag.strip()]

            if typer.confirm("Souhaites-tu modifier les variables ?", default=False):
                new_vars = []
                while typer.confirm("Ajouter ou modifier une variable ?", default=False):
                    name = typer.prompt("Nom de la variable")
                    description = typer.prompt("Description")
                    default = typer.prompt("Valeur par d√©faut", default="")
                    new_vars.append({
                        "name": name,
                        "description": description,
                        "default": default
                    })
                cmd["variables"] = new_vars

            cmd["updated_at"] = datetime.utcnow().isoformat() + "Z"

            with open(DB_PATH, "w") as f:
                json.dump(commands, f, indent=2)

            typer.echo("‚úÖ Commande mise √† jour avec succ√®s")
            return

    typer.echo(f"‚ùå Aucune commande avec l'ID '{id}' n'a √©t√© trouv√©e.", err=True)


@app.command()
def select(execute: bool = typer.Option(False, "--run", help="Ex√©cuter la commande s√©lectionn√©e")):
    """
    Recherche et s√©lectionne une commande via fzf.
    """
    commands = load_commands()
    if not commands:
        typer.echo("‚ö†Ô∏è Aucune commande enregistr√©e.")
        raise typer.Exit()

    choices = [
        f"{cmd['id']} :: {cmd['title']} [{cmd['category']}] :: {', '.join(cmd['tags'])}"
        for cmd in commands
    ]

    try:
        result = subprocess.run(
            ["fzf"],
            input="\n".join(choices),
            text=True,
            capture_output=True
        )
    except FileNotFoundError:
        typer.echo("‚ùå fzf n'est pas install√©. Installe-le avant d'utiliser cette commande.")
        raise typer.Exit(code=1)

    if result.returncode != 0:
        typer.echo("‚ùå Aucune s√©lection.")
        raise typer.Exit()

    selected_line = result.stdout.strip()
    selected_id = selected_line.split(" :: ")[0]

    if execute:
        typer.echo(f"üöÄ Ex√©cution de la commande {selected_id}...")
        run(selected_id)
    else:
        typer.echo(f"üÜî Commande s√©lectionn√©e : {selected_id}")


@app.command()
def tui():
    """
    Lance l'interface TUI pour naviguer et ex√©cuter les commandes.
    """
    import asyncio
    import uuid
    from textual.screen import Screen
    from textual.app import App, ComposeResult
    from textual.containers import Vertical, Horizontal
    from textual.widgets import Input, Button, Header, Footer, ListView, ListItem, Static
    from textual.reactive import reactive
    from textual.message import Message
    from datetime import datetime


    commands = load_commands()

    class CommandAdded(Message):
        def __init__(self, command: dict) -> None:
            self.command = command
            super().__init__()

    class CommandAddScreen(Screen):

        def compose(self) -> ComposeResult:
            yield Header(show_clock=True)
            yield Static("‚ûï Nouvelle commande", classes="screen-title")
            yield Input(placeholder="Titre de la commande", id="title")
            yield Input(placeholder="Commande (avec {{ var }})", id="command")
            yield Input(placeholder="Cat√©gorie", id="category")
            yield Input(placeholder="Tags (s√©par√©s par des virgules)", id="tags")
            yield Input(placeholder="Description", id="description")
            yield Input(placeholder="Contexte d'utilisation", id="contexte")
            yield Button("‚ûï Ajouter une variable", id="add_var", variant="default")
            self.var_inputs = []
            yield Vertical(*self.var_inputs, id="variables-container")
            yield Horizontal(
                Button("Valider", id="submit", variant="primary"),
                Button("Annuler", id="cancel", variant="default"),
                classes="button-row"
            )
            yield Footer()

        async def on_button_pressed(self, event: Button.Pressed) -> None:
            if event.button.id == "submit":
                title = self.query_one("#title", Input).value.strip()
                command = self.query_one("#command", Input).value.strip()
                category = self.query_one("#category", Input).value.strip()
                tags_str = self.query_one("#tags", Input).value.strip()
                description = self.query_one("#description", Input).value.strip()
                contexte = self.query_one("#contexte", Input).value.strip()

                tags = [tag.strip() for tag in tags_str.split(",") if tag.strip()]

                variables = []
                for row in self.var_inputs:
                    name = row.query_one(".var-name", Input).value.strip()
                    var_desc = row.query_one(".var-desc", Input).value.strip()
                    default = row.query_one(".var-default", Input).value.strip()
                    if name:
                        variables.append({
                            "name": name,
                            "description": var_desc,
                            "default": default
                        })

                if not title or not command or not category:
                    return  # Optionnel : message d‚Äôerreur

                commands = load_commands()
                next_id = f"{(max([int(c['id']) for c in commands if c['id'].isdigit()] or [0]) + 1):03}"

                new_command = {
                    "id": next_id,
                    "title": title,
                    "command": command,
                    "category": category,
                    "tags": tags,
                    "description": description,
                    "contexte": contexte,
                    "variables": variables,
                    "created_at": datetime.utcnow().isoformat() + "Z",
                    "updated_at": datetime.utcnow().isoformat() + "Z"
                }

                commands.append(new_command)
                save_commands(commands)

                # On pop l‚Äô√©cran d‚Äôajout
                self.app.post_message(CommandAdded(new_command))

                # Rafra√Æchir la liste dans l‚Äôapp principale
                if isinstance(self.app, CommandTUI):
                    self.app.refresh_list()

            elif event.button.id == "add_var":
                container = self.query_one("#variables-container", Vertical)

                var_name = Input(placeholder="Nom", classes="var-name")
                var_desc = Input(placeholder="Description", classes="var-desc")
                var_default = Input(placeholder="Valeur par d√©faut", classes="var-default")
                row = Horizontal(var_name, var_desc, var_default)
                self.var_inputs.append(row)
                await container.mount(row)  # monte dynamiquement le bloc


            elif event.button.id == "cancel":
                self.app.pop_screen()


    class CommandCard(Vertical):
        def __init__(self, command_data: dict):
            super().__init__(classes="card")
            self.command_data = command_data
    
            self.title = Static(f"üì¶ {command_data['title']}", classes="card-title")
            self.cmdline = Static(command_data["command"], classes="card-command")
            self.meta = Static(
                f"[{command_data['category']}]  Tags: {', '.join(command_data['tags'])}\n",
                classes="card-meta"
            )
            # Ajout d'un bloc de description des variables
            var_lines = []
            if command_data["variables"]:
                for var in command_data["variables"]:
                    desc = var.get("description", "‚Äî")
                    default = var.get("default", "")
                    line = f"- {var['name']} : {desc} (par d√©faut : {default})"
                    var_lines.append(line)
            else:
                var_lines.append("Aucune variable.")

            self.description_block = Static(
                f"üìù Description : {command_data.get('description', '‚Äî')}",
                classes="card-description"
            )

            self.context_block = Static(
                f"üìÅ Contexte : {command_data.get('contexte', '‚Äî')}\n\n",
                classes="card-context"
            )

            self.var_block = Static(
                "üîß Variables :\n" + "\n".join(var_lines),
                classes="card-variables"
            )

        async def on_mount(self):
            self.mount(self.title, self.cmdline, self.meta, self.description_block, self.context_block, self.var_block)

    class CommandItem(ListItem):
        def __init__(self, command_data: dict):
            super().__init__()
            self.command_data = command_data
            self.card = CommandCard(command_data)
    
        async def on_mount(self):
            await self.mount(self.card)

    class CommandTUI(App):
        CSS_PATH = "styles/tui.tcss"
        BINDINGS = [("q", "quit", "Quitter"), ("enter", "run_command", "Ex√©cuter")]

        selected_command = reactive(None)

        async def on_command_added(self, message: CommandAdded) -> None:
            # Revenir √† l'√©cran principal et recharger
            await self.pop_screen()
            self.refresh_list()

        def refresh_list(self):
            if not hasattr(self, 'list_view'):
                return  # s√©curit√©
            self.list_view.clear()
            for cmd in load_commands():
                self.list_view.append(CommandItem(cmd))
            self.set_focus(self.list_view)


        def compose(self) -> ComposeResult:
            yield Header()
            self.list_view = ListView(*[CommandItem(cmd) for cmd in commands])
            yield Vertical(self.list_view)
            yield Button("‚ûï Ajouter une commande", id="add", variant="primary")
            yield Footer()

        async def on_button_pressed(self, event: Button.Pressed) -> None:
            if event.button.id == "add":
                await self.push_screen(CommandAddScreen())

        async def on_command_added(self, message: CommandAdded) -> None:
            self.refresh_list()
            self.set_focus(self.list_view)
            await self.pop_screen()

        def on_list_view_selected(self, event: ListView.Selected):
            self.selected_command = event.item.command_data

        def action_run_command(self):
            if self.selected_command:
                cmd = self.selected_command
                template = Template(cmd["command"])
                vars_needed = {}

                for var in cmd["variables"]:
                    val = input(f"{var['description']} ({var['name']}): ") or var.get("default", "")
                    vars_needed[var["name"]] = val

                final_cmd = template.render(**vars_needed)
                print(f"\nüëâ Commande : {final_cmd}")
                confirm = input("Lancer cette commande ? (y/N): ").lower()
                if confirm == "y":
                    import os
                    os.system(final_cmd)
                    input("\nAppuyez sur Entr√©e pour revenir...")
                    self.exit()

    CommandTUI().run()



if __name__ == "__main__":
    app()

